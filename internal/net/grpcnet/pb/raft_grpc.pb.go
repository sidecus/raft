// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RafterClient is the client API for Rafter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RafterClient interface {
	// Sends a message
	SendMessage(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*RaftReply, error)
}

type rafterClient struct {
	cc grpc.ClientConnInterface
}

func NewRafterClient(cc grpc.ClientConnInterface) RafterClient {
	return &rafterClient{cc}
}

func (c *rafterClient) SendMessage(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*RaftReply, error) {
	out := new(RaftReply)
	err := c.cc.Invoke(ctx, "/pb.Rafter/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RafterServer is the server API for Rafter service.
// All implementations must embed UnimplementedRafterServer
// for forward compatibility
type RafterServer interface {
	// Sends a message
	SendMessage(context.Context, *RaftMessage) (*RaftReply, error)
	mustEmbedUnimplementedRafterServer()
}

// UnimplementedRafterServer must be embedded to have forward compatible implementations.
type UnimplementedRafterServer struct {
}

func (UnimplementedRafterServer) SendMessage(context.Context, *RaftMessage) (*RaftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRafterServer) mustEmbedUnimplementedRafterServer() {}

// UnsafeRafterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RafterServer will
// result in compilation errors.
type UnsafeRafterServer interface {
	mustEmbedUnimplementedRafterServer()
}

func RegisterRafterServer(s grpc.ServiceRegistrar, srv RafterServer) {
	s.RegisterService(&_Rafter_serviceDesc, srv)
}

func _Rafter_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RafterServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Rafter/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RafterServer).SendMessage(ctx, req.(*RaftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rafter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Rafter",
	HandlerType: (*RafterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Rafter_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/raft.proto",
}
